



あなたの発言
pwaアプリでカメラから直接写真取り込む方法を考えて
Copilot の発言
PWAでカメラから直接写真を取り込む3つのアプローチ
以下では、ブラウザ上で動作するPWA（インストール版含む）からネイティブのカメラを呼び出し、写真データを取得する主な手法を3つ紹介します。要件や対応ブラウザに合わせて選んでみてください。

1. <input type="file">＋capture属性
最もシンプルで互換性の高い方法。モバイル端末でファイル選択ダイアログを開く際、直接カメラ起動を促せます。

html


コピー
<input
  type="file"
  accept="image/*"
  capture="environment"
  id="photoInput"
/>
js


コピー
const photoInput = document.getElementById('photoInput');
photoInput.addEventListener('change', async () => {
  const file = photoInput.files[0];
  if (!file) return;
  // ファイルをBlobやDataURLに変換
  const imgURL = URL.createObjectURL(file);
  document.querySelector('img.preview').src = imgURL;
  // 必要ならサーバへアップロード
});
accept="image/*": 画像のみを選択

capture="environment": 背面カメラ起動（前面はuser）

対応：ほぼ全てのモバイルブラウザで動作

2. getUserMedia()＋<canvas>でのスナップショット
リアルタイムにプレビューしつつ、シャッターボタンでフレームを切り出す方法。UIカスタマイズ性が高いのが強みです。

html


コピー
<video autoplay playsinline id="videoPreview"></video>
<button id="snap">撮影</button>
<canvas id="canvas" style="display:none;"></canvas>
<img class="preview" />
js


コピー
const video = document.getElementById('videoPreview');
const canvas = document.getElementById('canvas');
const snapBtn = document.getElementById('snap');

// カメラ映像を取得
const stream = await navigator.mediaDevices.getUserMedia({ video: { facingMode: 'environment' } });
video.srcObject = stream;

// 撮影時にcanvasへ描画
snapBtn.addEventListener('click', () => {
  const ctx = canvas.getContext('2d');
  canvas.width = video.videoWidth;
  canvas.height = video.videoHeight;
  ctx.drawImage(video, 0, 0);
  // Data URL取得
  const dataURL = canvas.toDataURL('image/jpeg', 0.9);
  document.querySelector('img.preview').src = dataURL;
});
UIを自由にデザイン可能

シャッター時の前後処理（エフェクト付与など）も自在

注意：iOS PWA（ホーム画面追加）ではgetUserMediaの制限が若干異なる場合あり

3. Image Capture APIで高画質撮影
getUserMedia()で取得したMediaStreamTrackを元に、より高解像度の写真撮影を実現できます。ブラウザ対応を要確認ですが、品質が必要なアプリに最適です。

js


コピー
// 既に取得済みのstream
const track = stream.getVideoTracks()[0];
const imageCapture = new ImageCapture(track);

async function takePhoto() {
  try {
    const photoBlob = await imageCapture.takePhoto();
    const imgURL = URL.createObjectURL(photoBlob);
    document.querySelector('img.preview').src = imgURL;
  } catch (e) {
    console.error('撮影に失敗:', e);
  }
}
フル解像度での撮影が可能

フラッシュ制御や露出設定も一部API経由で操作できる

対応：Chrome系やEdgeなど比較的新しめのブラウザ

追加で知っておきたいポイント
保存方法

IndexedDB／Cache API: オフライン時の一時保存に便利

File System Access API: ユーザーの許可でローカルファイルへ書き出し

権限管理

PWAインストール版では「カメラ権限」がアプリ単位で管理される

初回アクセス時に権限ダイアログが出るため、UX設計で丁寧な説明を入れる

UIライブラリ連携

React／Vueなら独立コンポーネント化し、再利用性を高める

モバイル最適化CSSフレームワーク（Framework7、Ionicなど）とも相性◎

次は具体的に使いたい技術スタック（React/Vue/純粋JS）や、社内向けPWAか公開アプリかを教えてください。それに合わせたサンプルコードやディレクトリ構成例を提示しますね。

会話を続ける


クイック応答



